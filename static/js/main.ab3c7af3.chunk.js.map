{"version":3,"sources":["components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","children","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","el","name","onClick","Notification","message","App","state","handleFeedbackLeave","event","console","log","currentTarget","stateItem","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAOeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,0BAASC,UAAU,UAAnB,UACE,uDACCD,MCkBUE,EAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,4CACA,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,sDAAyBC,EAAzB,WCUWC,EAjBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,6BACGD,EAAQE,KAAI,SAAAC,GAAE,OACb,6BACE,wBAAQC,KAAMD,EAAIE,QAASJ,EAA3B,SACGE,KAFIA,SCCAG,EAJM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KCkD5BC,E,4MA7CbC,MAAQ,CAAEf,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCc,oBAAsB,SAAAC,GACpBC,QAAQC,IAAIF,EAAMG,cAAcV,MAChC,IAAIW,EAAYJ,EAAMG,cAAcV,KACpC,EAAKY,UAAS,SAAAC,GAAS,sBACpBF,EAAYE,EAAUF,GAAa,O,EAIxCG,mBAAqB,WAAO,IAAD,EACM,EAAKT,MACpC,OAFyB,EACjBf,KADiB,EACXC,QADW,EACFC,K,EAIzBuB,gCAAkC,WAAO,IAC/BzB,EAAS,EAAKe,MAAdf,KACR,OAAO0B,KAAKC,MAAO3B,EAAO,EAAKwB,qBAAwB,M,4CAGzD,WACEN,QAAQC,IAAIS,KAAKb,OADV,MAEwBa,KAAKb,MAA5Bf,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IACvB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEI,QAASuB,OAAOC,KAAKF,KAAKb,OAC1BR,gBAAiBqB,KAAKZ,sBAEvBY,KAAKJ,qBACJ,cAAC,EAAD,CACExB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,KAAKJ,qBACZpB,mBAAoBwB,KAAKH,oCAG3B,cAAC,EAAD,CAAcZ,QAAQ,6B,GAvCdkB,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ab3c7af3.chunk.js","sourcesContent":["const Section = ({ children }) => (\n  <section className=\"section\">\n    <h1>Please leave feedback</h1>\n    {children}\n  </section>\n);\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <h2>Statistics</h2>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive Percentage: {positivePercentage}%</p>\n  </div>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <ul>\n    {options.map(el => (\n      <li key={el}>\n        <button name={el} onClick={onLeaveFeedback}>\n          {el}\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.number).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <h2>{message}</h2>;\n\nNotification.propTypes = { message: PropTypes.string.isRequired };\n\nexport default Notification;\n","import { Component } from 'react';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  handleFeedbackLeave = event => {\n    console.log(event.currentTarget.name);\n    let stateItem = event.currentTarget.name;\n    this.setState(prevState => ({\n      [stateItem]: prevState[stateItem] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    console.log(this.state);\n    const { good, neutral, bad } = this.state;\n    return (\n      <Section>\n        <FeedbackOptions\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.handleFeedbackLeave}\n        />\n        {this.countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}